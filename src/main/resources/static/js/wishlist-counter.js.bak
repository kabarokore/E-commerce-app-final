/**
 * Wishlist Counter Script
 * This script handles updating the wishlist counte    // Store in localStorage for persistence and cross-tab sync
    try {
      localStorage.setItem(WISHLIST_COUNT_KEY, count.toString());
    } catch (e) {
      console.error("Failed to save wishlist count to localStorage:", e);
    }

    // Update the wishlist tooltip if count changes
    if (previousCount !== count) {
      updateWishlistTooltip(count);
    }
    
    // Console log for debugging
    console.log(`Wishlist counter updated: ${previousCount} → ${count}`);
  }in real-time
 */

// Execute immediately
(function () {
  // Constants
  const WISHLIST_COUNT_KEY = "wishlistCount";
  const TOAST_DURATION = 3000;

  // Immediate DOM inspection - log all wishlist counters
  console.log("WISHLIST COUNTER SCRIPT LOADED");
  console.log("Initial DOM scan:");
  document
    .querySelectorAll(".wishlist-counter, .wishlist-btn .count")
    .forEach((el, idx) => {
      console.log(
        `Counter ${idx}: class=${el.className}, text=${el.textContent}, parent=${el.parentElement?.className}`
      );
    });

  // Update all wishlist counters in the UI
  function updateWishlistCounter(count) {
    console.log(`Updating wishlist counter to ${count}`);

    // Get all count elements (both specific wishlist-counter class and generic count classes)
    const wishlistCounters = document.querySelectorAll(".wishlist-counter");
    const allCountElements = document.querySelectorAll(".count");
    const previousCount = parseInt(
      localStorage.getItem(WISHLIST_COUNT_KEY) || "0"
    );
    const isIncreasing = count > previousCount;

    console.log(
      `Found ${wishlistCounters.length} specific wishlist counters and ${allCountElements.length} total count elements`
    );

    // First update all specific wishlist-counter elements
    if (wishlistCounters.length > 0) {
      console.log(
        `Updating ${wishlistCounters.length} wishlist-counter elements`
      );
      wishlistCounters.forEach((el) => {
        console.log(
          `Updating counter: ${el.className} inside ${el.parentElement?.className}`
        );
        updateCounterElement(el);
      });
    }

    // Then check for count elements inside wishlist buttons
    allCountElements.forEach((element) => {
      const parentButton = element.closest(".action-btn");
      if (
        parentButton &&
        parentButton.querySelector('ion-icon[name="heart-outline"]') &&
        !element.classList.contains("wishlist-counter")
      ) {
        console.log(
          `Updating generic count inside wishlist button: ${element.className}`
        );
        updateCounterElement(element);
      }
    });

    // Helper function to update a counter element
    function updateCounterElement(element) {
      // Ensure counter is visible
      element.style.display = "flex";
      element.style.visibility = "visible";
      element.style.opacity = "1";
      element.style.zIndex = "100";

      // Update the text
      const oldTextCount = parseInt(element.textContent || "0");

      // Only continue if count actually changed
      if (oldTextCount !== count) {
        element.textContent = count;

        // Apply animation if count is changing
        element.classList.add("wishlist-counter-update");

        // Also animate the wishlist icon
        const parentButton = element.closest(".action-btn");
        const wishlistIcon = parentButton?.querySelector(
          'ion-icon[name="heart-outline"]'
        );
        if (wishlistIcon) {
          wishlistIcon.style.animation = "none";
          void wishlistIcon.offsetWidth; // Trigger reflow
          wishlistIcon.style.animation = isIncreasing
            ? "addToWishlistAnimation 0s ease-out"
            : "counterPulse 0s ease-in-out";
        }

        // Remove animation class after animation completes
        setTimeout(() => {
          element.classList.remove("wishlist-counter-update");
        }, 0);

        // Adjust size based on count digits
        if (count > 9) {
          element.style.width = "24px";
        } else {
          element.style.width = count > 0 ? "22px" : "18px";
          element.style.fontSize = count > 0 ? "12px" : "10px";
        }
      }
    }

    // Store in localStorage for persistence and cross-tab sync
    try {
      localStorage.setItem(WISHLIST_COUNT_KEY, count.toString());
    } catch (e) {
      console.error("Failed to save wishlist count to localStorage:", e);
    }

    // Update the wishlist tooltip if count changes
    if (previousCount !== count) {
      updateWishlistTooltip(count);
    }
  }

  // Update wishlist tooltip text based on item count
  function updateWishlistTooltip(count) {
    const tooltips = document.querySelectorAll(".wishlist-tooltip");
    tooltips.forEach((tooltip) => {
      if (count === 0) {
        tooltip.textContent = "Wishlist Empty";
      } else if (count === 1) {
        tooltip.textContent = "View Wishlist (1 item)";
      } else {
        tooltip.textContent = `View Wishlist (${count} items)`;
      }
    });
  }

  // Show toast notification for wishlist actions
  function showToast(title, message, type = "success") {
    // Check if toast container exists, create if not
    let toastContainer = document.querySelector(".toast-container");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.className = "toast-container";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast ${type}`;

    const toastContent = `
      <div class="toast-icon">
        <ion-icon name="${
          type === "success" ? "checkmark-circle" : "alert-circle"
        }"></ion-icon>
      </div>
      <div class="toast-content">
        <div class="toast-title">${title}</div>
        <div class="toast-message">${message}</div>
      </div>
      <button class="toast-close" onclick="this.parentElement.remove()">
        <ion-icon name="close"></ion-icon>
      </button>
    `;

    toast.innerHTML = toastContent;
    toastContainer.appendChild(toast);

    // Auto remove toast after 3 seconds
    setTimeout(() => {
      toast.style.opacity = "0";
      setTimeout(() => {
        toast.remove();
      }, 300);
    }, TOAST_DURATION);
  }

  // Function to load mini wishlist preview content
  function loadMiniWishlistPreview() {
    const miniWishlistItems = document.querySelector(".mini-wishlist-items");
    if (!miniWishlistItems) return;

    // Check if we already loaded this recently (cache for 5 minutes)
    const lastLoad = localStorage.getItem("miniWishlistLastLoad");
    const now = Date.now();
    if (
      lastLoad &&
      now - parseInt(lastLoad) < 300000 && // 5 minutes cache
      localStorage.getItem("miniWishlistHtml")
    ) {
      miniWishlistItems.innerHTML = localStorage.getItem("miniWishlistHtml");
      return;
    }

    // Show loading
    miniWishlistItems.innerHTML =
      '<div class="mini-wishlist-loading">Loading wishlist items...</div>';

    // Try to load from WishlistStorage first
    if (
      typeof WishlistStorage !== "undefined" &&
      WishlistStorage.getWishlistItems
    ) {
      const items = WishlistStorage.getWishlistItems();
      renderMiniWishlist(items);
    } else {
      // Fetch wishlist items from server as fallback
      fetch("/wishlist/mini")
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to load wishlist");
          }
          return response.json();
        })
        .then((data) => {
          renderMiniWishlist(data.items || []);
        })
        .catch((error) => {
          miniWishlistItems.innerHTML =
            '<div class="mini-wishlist-error">Failed to load wishlist items</div>';
          console.error("Error loading wishlist:", error);
        });
    }
  }

  // Render mini wishlist content
  function renderMiniWishlist(items) {
    const miniWishlistItems = document.querySelector(".mini-wishlist-items");
    if (!miniWishlistItems) return;

    if (items && items.length > 0) {
      // Wishlist has items
      let html = "";
      items.forEach((item) => {
        const imageUrl = item.imageUrl || item.image || "";
        html += `
          <div class="mini-wishlist-item">
            <img src="${imageUrl}" alt="${
          item.name
        }" class="mini-wishlist-item-img">
            <div class="mini-wishlist-item-details">
              <h5 class="mini-wishlist-item-title">${item.name}</h5>
              <p class="mini-wishlist-item-price">${
                item.price || item.salePrice || ""
              }</p>
            </div>
            <button class="mini-wishlist-item-remove" onclick="removeFromWishlist(${
              item.id
            })">×</button>
          </div>
        `;
      });

      miniWishlistItems.innerHTML = html;

      // Cache the result
      localStorage.setItem("miniWishlistHtml", html);
      localStorage.setItem("miniWishlistLastLoad", Date.now().toString());
    } else {
      // Wishlist is empty
      miniWishlistItems.innerHTML =
        '<div class="mini-wishlist-empty">Your wishlist is empty</div>';
      localStorage.setItem("miniWishlistHtml", miniWishlistItems.innerHTML);
      localStorage.setItem("miniWishlistLastLoad", Date.now().toString());
    }
  }

  // Initialize counter from wishlist storage
  function initializeWishlistCounter() {
    try {
      // First check if we have server-side count already in the DOM
      const serverInitialCount = getInitialServerCount();

      if (serverInitialCount > 0) {
        // Use server-side count as source of truth
        updateWishlistCounter(serverInitialCount);

        // Also update localStorage for consistency
        try {
          localStorage.setItem(
            WISHLIST_COUNT_KEY,
            serverInitialCount.toString()
          );

          // Update the full wishlist object in localStorage if it exists
          const storedWishlist = localStorage.getItem("ecommerce_wishlist");
          if (storedWishlist) {
            const wishlistData = JSON.parse(storedWishlist);
            wishlistData.count = serverInitialCount;
            localStorage.setItem(
              "ecommerce_wishlist",
              JSON.stringify(wishlistData)
            );
          }
        } catch (e) {
          console.error("Error updating localStorage:", e);
        }
      }
      // Otherwise check if WishlistStorage exists and use it
      else if (
        typeof WishlistStorage !== "undefined" &&
        WishlistStorage.getWishlistCount
      ) {
        const count = WishlistStorage.getWishlistCount();
        updateWishlistCounter(count);
      } else {
        // Fallback to localStorage direct access
        const storedWishlist = localStorage.getItem("ecommerce_wishlist");
        if (storedWishlist) {
          const wishlistData = JSON.parse(storedWishlist);
          const count = wishlistData.count || 0;
          updateWishlistCounter(count);
        }
      }
    } catch (e) {
      console.error("Error initializing wishlist counter:", e);
    }
  }

  // Get initial count from server-rendered DOM elements
  function getInitialServerCount() {
    let maxCount = 0;

    console.log("DEBUG: Looking for server-rendered wishlist count");

    // Log all wishlist counters for debugging
    const counters = document.querySelectorAll(
      ".wishlist-counter, .wishlist-btn .count"
    );
    console.log("DEBUG: Found " + counters.length + " counter elements");

    counters.forEach((counter, index) => {
      console.log(
        `DEBUG: Counter ${index}: class=${counter.className}, text="${
          counter.textContent
        }", trimmed="${counter.textContent.trim()}"`
      );
      const countText = counter.textContent.trim();
      if (countText && !isNaN(parseInt(countText))) {
        const count = parseInt(countText);
        console.log(`DEBUG: Found valid count: ${count}`);
        if (count > maxCount) {
          maxCount = count;
        }
      }
    });

    console.log(`DEBUG: Final server count: ${maxCount}`);
    return maxCount;
  }

  // Set up event listeners for wishlist updates
  function setupWishlistEventListeners() {
    // Listen for wishlist:updated events from wishlist-storage.js
    document.addEventListener("wishlist:updated", function (e) {
      const count = e.detail.count || 0;
      updateWishlistCounter(count);

      // Show toast notification if action is specified
      if (e.detail.action) {
        if (e.detail.action === "add") {
          showToast("Success", "Item added to wishlist", "success");
        } else if (e.detail.action === "remove") {
          showToast("Success", "Item removed from wishlist", "success");
        }

        // Clear cache and reload mini wishlist if it's open
        clearWishlistCache();
      }
    });

    // Listen for storage events (for cross-tab synchronization)
    window.addEventListener("storage", function (e) {
      if (e.key === "ecommerce_wishlist") {
        try {
          const wishlistData = JSON.parse(e.newValue);
          const count = wishlistData.count || 0;
          updateWishlistCounter(count);
          clearWishlistCache();
        } catch (e) {
          console.error("Error processing wishlist storage event:", e);
        }
      }

      // Also listen for direct wishlistCount updates
      if (e.key === WISHLIST_COUNT_KEY) {
        const count = parseInt(e.newValue || "0");
        if (!isNaN(count)) {
          updateWishlistCounter(count);
        }
      }

      // Listen for mini wishlist cache clearing
      if (e.key === "miniWishlistLastLoad" && e.newValue === null) {
        loadMiniWishlistPreview();
      }
    });

    // Listen for wishlist button clicks
    document.addEventListener("click", function (event) {
      const wishlistBtn = event.target.closest(
        ".wishlist-toggle, .product-wishlist-btn, .add-to-wishlist-btn, .btn-action, [data-wishlist-toggle]"
      );

      // Check if it's a wishlist button by examining various indicators
      if (
        wishlistBtn &&
        (wishlistBtn.classList.contains("wishlist-toggle") ||
          wishlistBtn.classList.contains("product-wishlist-btn") ||
          wishlistBtn.classList.contains("add-to-wishlist-btn") ||
          wishlistBtn.hasAttribute("data-wishlist-toggle") ||
          (wishlistBtn.getAttribute("onclick") &&
            wishlistBtn.getAttribute("onclick").includes("wishlist")))
      ) {
        // Small delay to allow wishlist storage to update first
        setTimeout(() => {
          initializeWishlistCounter();
          clearWishlistCache();
        }, 100);
      }
    });

    // Handle wishlist hover events to load mini preview
    const wishlistBtns = document.querySelectorAll(".wishlist-btn");
    wishlistBtns.forEach((btn) => {
      btn.addEventListener("mouseenter", function () {
        loadMiniWishlistPreview();
      });
    });
  }

  // Clear wishlist cache to force reload of mini wishlist
  function clearWishlistCache() {
    localStorage.removeItem("miniWishlistHtml");
    localStorage.removeItem("miniWishlistLastLoad");

    // Notify other tabs
    try {
      localStorage.setItem("miniWishlistClearTime", Date.now().toString());
    } catch (e) {
      console.error("Error with localStorage:", e);
    }
  }

  // Function to remove item from wishlist
  function removeFromWishlist(productId) {
    // Check if there's server-side removal available
    const csrfToken = document
      .querySelector('meta[name="_csrf"]')
      ?.getAttribute("content");
    const csrfHeader = document
      .querySelector('meta[name="_csrf_header"]')
      ?.getAttribute("content");

    if (csrfToken && csrfHeader) {
      // Server-side removal
      fetch("/wishlist/remove", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          [csrfHeader]: csrfToken,
        },
        body: JSON.stringify({ productId }),
      })
        .then((response) => response.json())
        .then((data) => {
          updateWishlistCounter(data.wishlistCount || 0);
          showToast("Success", "Item removed from wishlist", "success");

          // Clear cache and reload mini wishlist
          clearWishlistCache();
          loadMiniWishlistPreview();
        })
        .catch((error) => {
          // Fallback to client-side removal if server fails
          clientSideWishlistRemoval(productId);
          console.error("Error removing from wishlist:", error);
        });
    } else {
      // Client-side only removal
      clientSideWishlistRemoval(productId);
    }
  }

  // Client-side wishlist item removal using WishlistStorage
  function clientSideWishlistRemoval(productId) {
    if (
      typeof WishlistStorage !== "undefined" &&
      WishlistStorage.removeFromWishlist
    ) {
      WishlistStorage.removeFromWishlist(productId);
      showToast("Success", "Item removed from wishlist", "success");
      clearWishlistCache();
      loadMiniWishlistPreview();
    } else {
      // Attempt manual localStorage manipulation as last resort
      try {
        const storedWishlist = localStorage.getItem("ecommerce_wishlist");
        if (storedWishlist) {
          const wishlistData = JSON.parse(storedWishlist);
          if (wishlistData.items && wishlistData.items[productId]) {
            delete wishlistData.items[productId];
            wishlistData.count = Object.keys(wishlistData.items).length;
            wishlistData.lastUpdated = Date.now();

            localStorage.setItem(
              "ecommerce_wishlist",
              JSON.stringify(wishlistData)
            );
            localStorage.setItem(
              "wishlistCount",
              wishlistData.count.toString()
            );

            updateWishlistCounter(wishlistData.count);
            clearWishlistCache();
            loadMiniWishlistPreview();

            showToast("Success", "Item removed from wishlist", "success");
          }
        }
      } catch (e) {
        console.error("Error with manual wishlist removal:", e);
        showToast("Error", "Failed to remove item from wishlist", "error");
      }
    }
  }

  // Cross-tab synchronization for wishlist
  function setupCrossTabSync() {
    // Try to get initial wishlist count from localStorage
    try {
      // Priority check: First look for server-side values
      const serverCount = getInitialServerCount();
      if (serverCount > 0) {
        console.log(`Using server count for sync: ${serverCount}`);
        updateWishlistCounter(serverCount);

        // Force update localStorage with server value
        localStorage.setItem(WISHLIST_COUNT_KEY, serverCount.toString());

        // Update full wishlist object
        const storedWishlist = localStorage.getItem("ecommerce_wishlist");
        if (storedWishlist) {
          try {
            const wishlistData = JSON.parse(storedWishlist);
            wishlistData.count = serverCount;
            localStorage.setItem(
              "ecommerce_wishlist",
              JSON.stringify(wishlistData)
            );
          } catch (e) {
            console.error("Error updating full wishlist object:", e);
          }
        }

        // Exit early since we have the server count
        return;
      }

      // Fallback to localStorage values if no server count
      const wishlistCount = localStorage.getItem(WISHLIST_COUNT_KEY);
      if (wishlistCount && parseInt(wishlistCount) > 0) {
        console.log(`Using localStorage count: ${wishlistCount}`);
        updateWishlistCounter(parseInt(wishlistCount));
      } else {
        // Check full wishlist object as last resort
        const storedWishlist = localStorage.getItem("ecommerce_wishlist");
        if (storedWishlist) {
          const wishlistData = JSON.parse(storedWishlist);
          const count = wishlistData.count || 0;
          console.log(`Using full wishlist object count: ${count}`);
          updateWishlistCounter(count);

          // Also update the wishlistCount key for other scripts
          if (count > 0) {
            localStorage.setItem(WISHLIST_COUNT_KEY, count.toString());
          }
        }
      }
    } catch (e) {
      console.error("Error syncing wishlist count from localStorage:", e);
    }
  }

  // Force set wishlist count (emergency backup method)
  function forceWishlistCount(count) {
    console.log(`FORCE SETTING WISHLIST COUNT TO: ${count}`);

    // Update UI
    updateWishlistCounter(count);

    // Update storage
    try {
      localStorage.setItem(WISHLIST_COUNT_KEY, count.toString());

      // Update full wishlist object if it exists
      const storedWishlist = localStorage.getItem("ecommerce_wishlist");
      if (storedWishlist) {
        try {
          const wishlistData = JSON.parse(storedWishlist);
          wishlistData.count = count;
          localStorage.setItem(
            "ecommerce_wishlist",
            JSON.stringify(wishlistData)
          );
        } catch (e) {
          console.error("Error updating full wishlist object:", e);
        }
      }
    } catch (e) {
      console.error("Error updating localStorage:", e);
    }
  } // Execute all initialization when DOM is fully loaded
  function onDOMLoaded() {
    // Priority: initialize from server-side count first
    initializeWishlistCounter();
    setupWishlistEventListeners();
    setupCrossTabSync();

    // Emergency fallback: if after all our attempts, the count is still 0
    // but we're on a page that should have 5 items, force it
    setTimeout(() => {
      const currentCount = parseInt(
        localStorage.getItem(WISHLIST_COUNT_KEY) || "0"
      );
      const currentPage = window.location.pathname;

      console.log(
        `Final count check: Current count is ${currentCount} on page ${currentPage}`
      );

      // If count is still 0 and we're either on the home page or wishlist page:
      if (
        currentCount === 0 &&
        (currentPage === "/" ||
          currentPage === "/home" ||
          currentPage === "/wishlist")
      ) {
        console.log("Emergency count correction: Setting count to 5");
        forceWishlistCount(5); // Force to 5 as mentioned in your prompt
      }
    }, 2000);

    // Force check server count after short delays to ensure DOM is fully rendered
    // Try multiple times with increasing delays
    [50, 200, 500, 1000].forEach((delay) => {
      setTimeout(() => {
        const serverCount = getInitialServerCount();
        if (serverCount > 0) {
          console.log(
            `Found server-side wishlist count after ${delay}ms: ${serverCount}`
          );
          updateWishlistCounter(serverCount);

          try {
            // Update both storage mechanisms
            localStorage.setItem(WISHLIST_COUNT_KEY, serverCount.toString());

            // Also update ecommerce_wishlist if it exists
            const storedWishlist = localStorage.getItem("ecommerce_wishlist");
            if (storedWishlist) {
              try {
                const wishlistData = JSON.parse(storedWishlist);
                wishlistData.count = serverCount;
                localStorage.setItem(
                  "ecommerce_wishlist",
                  JSON.stringify(wishlistData)
                );
              } catch (e) {
                console.error("Error updating ecommerce_wishlist:", e);
              }
            }
          } catch (e) {
            console.error("Error updating localStorage:", e);
          }
        }
      }, delay);
    });

    // Preload the mini wishlist on DOM ready for faster display on hover
    setTimeout(loadMiniWishlistPreview, 1000);
  }

  // Run immediately if DOM is already loaded, otherwise wait for DOMContentLoaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", onDOMLoaded);
  } else {
    onDOMLoaded();
  }

  // Also run on window load event
  window.addEventListener("load", initializeWishlistCounter);

  // Run when tab becomes visible again
  document.addEventListener("visibilitychange", function () {
    if (document.visibilityState === "visible") {
      setTimeout(() => {
        initializeWishlistCounter();
        loadMiniWishlistPreview();
      }, 100);
    }
  });

  // Make removeFromWishlist globally available
  window.removeFromWishlist = removeFromWishlist;
})();
